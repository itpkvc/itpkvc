#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('project:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var express = require('express');
var router = express.Router();
const { Server } = require("socket.io");
const io = new Server(server);
var Chat = require('../models/chatModel');
var Objectid = require('mongodb').ObjectID;
io.on('connection', (socket) => {
  
  console.log('a user connected');
  //find Chat
  socket.on("findTheme",data=>{
      //console.log(data)
      data.theme_id = new Objectid(data.theme_id)
      Chat.aggregate([
          {
            $match: { theme_id: data.theme_id }
          },
          {
              "$lookup": {
                  "from": "users",
                  "localField": "user_id",
                  "foreignField": "_id",
                  "as": "user"
              },
          },
          {
            $unwind : '$user'
          },
          {
            $lookup: {
              from: "themes",
              localField: "theme_id",
              foreignField: "_id",
              as: "theme"
            }
          },
          {
              $unwind : '$theme'
          },
          { $sort: {  updated: -1 } }
      ]).exec((err,res)=>{
        if(err){
          throw err;
        }
        // Emit the messages
        socket.emit('output', res);
      })
  })
 
  // handle the new message event
  socket.on("new_message", data => {
    //console.log(data)
    if(data){
      Chat.insertMany(data,function(err,result){
        console.log(result[0])
        Chat.aggregate([
          {
            $match: { _id: result[0]._id }
          },
          {
              "$lookup": {
                  "from": "users",
                  "localField": "user_id",
                  "foreignField": "_id",
                  "as": "user"
              },
          },
          {
            $unwind : '$user'
          },
          {
            $lookup: {
              from: "themes",
              localField: "theme_id",
              foreignField: "_id",
              as: "theme"
            }
          },
          {
              $unwind : '$theme'
          },
          { $sort: {  updated: -1 } }
      ]).exec((err,resultOne)=>{
        //console.log(resultOne)
        io.emit('output', resultOne)
      })
       
      })
    }   
  })
  socket.on('typing', data => {
    //console.log(data)
    socket.emit('typing')
  })
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
